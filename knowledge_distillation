{"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"accelerator":"GPU","kaggle":{"accelerator":"gpu","dataSources":[],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision.transforms as transforms\nimport torchvision.datasets as datasets\nimport torch.functional as F\nfrom torch.utils.data import DataLoader\nimport torchvision","metadata":{"id":"grX-bnB5gDXL","execution":{"iopub.status.busy":"2024-05-03T09:45:30.261181Z","iopub.execute_input":"2024-05-03T09:45:30.261827Z","iopub.status.idle":"2024-05-03T09:45:36.293139Z","shell.execute_reply.started":"2024-05-03T09:45:30.261791Z","shell.execute_reply":"2024-05-03T09:45:36.292327Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ndevice","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ENkH9DHHpaYM","outputId":"25cf8698-5051-4a0a-b548-9749761e0dc6","execution":{"iopub.status.busy":"2024-05-03T09:45:36.295067Z","iopub.execute_input":"2024-05-03T09:45:36.295441Z","iopub.status.idle":"2024-05-03T09:45:36.321448Z","shell.execute_reply.started":"2024-05-03T09:45:36.295409Z","shell.execute_reply":"2024-05-03T09:45:36.320661Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"device(type='cuda')"},"metadata":{}}]},{"cell_type":"markdown","source":"## Preprocess Data","metadata":{"id":"KKaIHsT0jwNf"}},{"cell_type":"code","source":"transforms_cifar = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n])\n\ntrain_ds = datasets.CIFAR10(root='./cifar10/',train=True, download=True, transform=transforms_cifar)\ntest_ds = datasets.CIFAR10(root='./cifar10/',train=False, download=True, transform=transforms_cifar)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oGnXrXPxgLpm","outputId":"366ba9c5-787c-4724-c68b-8d9e5882d64a","execution":{"iopub.status.busy":"2024-05-03T09:45:36.322390Z","iopub.execute_input":"2024-05-03T09:45:36.322626Z","iopub.status.idle":"2024-05-03T09:45:43.587078Z","shell.execute_reply.started":"2024-05-03T09:45:36.322604Z","shell.execute_reply":"2024-05-03T09:45:43.586326Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./cifar10/cifar-10-python.tar.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 170498071/170498071 [00:03<00:00, 45965229.36it/s]\n","output_type":"stream"},{"name":"stdout","text":"Extracting ./cifar10/cifar-10-python.tar.gz to ./cifar10/\nFiles already downloaded and verified\n","output_type":"stream"}]},{"cell_type":"code","source":"train_loader = DataLoader(train_ds, batch_size=128, shuffle=True)\ntest_loader = DataLoader(test_ds, batch_size=128, shuffle=False)","metadata":{"id":"gOHZc3FdgLsl","execution":{"iopub.status.busy":"2024-05-03T09:45:43.588102Z","iopub.execute_input":"2024-05-03T09:45:43.588403Z","iopub.status.idle":"2024-05-03T09:45:43.593066Z","shell.execute_reply.started":"2024-05-03T09:45:43.588378Z","shell.execute_reply":"2024-05-03T09:45:43.592150Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"## Build Teacher & Student\n","metadata":{"id":"WoVmnnX5j1Oc"}},{"cell_type":"code","source":"# Teacher model\nclass TeacherNN(nn.Module):\n  def __init__(self, num_classes=10):\n        super(TeacherNN, self).__init__()\n        self.features = torchvision.models.vgg19(weights=True).features\n        self.avgpool = nn.AdaptiveAvgPool2d((7, 7))\n        self.classifier = nn.Sequential(\n            nn.Linear(512 * 7 * 7, 4096),\n            nn.ReLU(True),\n            nn.Dropout(),\n            nn.Linear(4096, 4096),\n            nn.ReLU(True),\n            nn.Dropout(),\n            nn.Linear(4096, num_classes)\n        )\n\n  def forward(self, x):\n        x = self.features(x)\n        x = self.avgpool(x)\n        x = torch.flatten(x, 1)\n        x = self.classifier(x)\n        return x\n\n# Lightweight model (Student)\nclass StudentNN(nn.Module):\n  def __init__(self, num_classes=10):\n        super(StudentNN, self).__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(3,64, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(64,128, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2),\n            nn.Conv2d(128,256, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2),\n        )\n        self.classifier = nn.Sequential(\n            nn.Linear(256*8*8, 512),\n            nn.ReLU(),\n            nn.Dropout(0.1),\n            nn.Linear(512, num_classes)\n        )\n\n  def forward(self, x):\n      x = self.features(x)\n      x = torch.flatten(x,1)\n      x = self.classifier(x)\n      return x\n","metadata":{"id":"Bw3TgrMpgLvg","execution":{"iopub.status.busy":"2024-05-03T09:48:02.546811Z","iopub.execute_input":"2024-05-03T09:48:02.547489Z","iopub.status.idle":"2024-05-03T09:48:02.559236Z","shell.execute_reply.started":"2024-05-03T09:48:02.547447Z","shell.execute_reply":"2024-05-03T09:48:02.558190Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"### Train Function","metadata":{"id":"xz9x3FVAPoWK"}},{"cell_type":"code","source":"def train(model, train_loader, epochs, learning_rate, device):\n  criterion = nn.CrossEntropyLoss()\n  optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n\n  model.train()\n\n  for epoch in range(epochs):\n    running_loss = 0.0\n    for inputs, labels in train_loader:\n      inputs, labels = inputs.to(device), labels.to(device)\n      optimizer.zero_grad()\n      outputs = model(inputs)\n      loss = criterion(outputs, labels)\n      loss.backward()\n      optimizer.step()\n      running_loss += loss.item()\n\n    print(f\"Epoch {epoch+1}/{epochs}, Loss: {running_loss / len(train_loader)}\")\n\ndef test(model, test_loader, device):\n  model.to(device)\n  model.eval()\n  correct = 0\n  total = 0\n\n  with torch.no_grad():\n    for inputs, labels in test_loader:\n      inputs, labels = inputs.to(device), labels.to(device)\n\n      outputs = model(inputs)\n      _, predicted = torch.max(outputs.data, 1)\n      total += labels.size(0)\n      correct += (predicted==labels).sum().item()\n\n  accuracy = 100 * correct / total\n  print(f'Test Accuracy: {accuracy:.2f}%')\n  return accuracy","metadata":{"id":"6Qsn-x3Fju41","execution":{"iopub.status.busy":"2024-05-03T09:48:07.289248Z","iopub.execute_input":"2024-05-03T09:48:07.290072Z","iopub.status.idle":"2024-05-03T09:48:07.299445Z","shell.execute_reply.started":"2024-05-03T09:48:07.290040Z","shell.execute_reply":"2024-05-03T09:48:07.298368Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"#### Train Teacher","metadata":{"id":"SxoiVhFEPuz6"}},{"cell_type":"code","source":"teacher = TeacherNN(10).to(device)\ntrain(teacher, train_loader, epochs=10, learning_rate=0.001, device=device)\ntest_acc_teacher = test(teacher, test_loader, device)","metadata":{"id":"sQMkpXueju7s","execution":{"iopub.status.busy":"2024-05-03T09:48:12.665642Z","iopub.execute_input":"2024-05-03T09:48:12.666378Z","iopub.status.idle":"2024-05-03T09:54:55.936123Z","shell.execute_reply.started":"2024-05-03T09:48:12.666345Z","shell.execute_reply":"2024-05-03T09:54:55.934883Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Epoch 1/10, Loss: 2.009003925201533\nEpoch 2/10, Loss: 1.4488375615280913\nEpoch 3/10, Loss: 1.0909687536756705\nEpoch 4/10, Loss: 0.8834918453870222\nEpoch 5/10, Loss: 0.7280347173476158\nEpoch 6/10, Loss: 0.6317339785720991\nEpoch 7/10, Loss: 0.5982440685677102\nEpoch 8/10, Loss: 0.5843574695117638\nEpoch 9/10, Loss: 0.48993028925202997\nEpoch 10/10, Loss: 0.4607716548778212\nTest Accuracy: 81.01%\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Students","metadata":{"id":"2ZlUhD2dzffJ"}},{"cell_type":"code","source":"torch.manual_seed(42)\nstudent1 = StudentNN(10).to(device)\n\ntorch.manual_seed(42)\nstudent2 = StudentNN(10).to(device)\n\ntorch.manual_seed(42)\nstudent3 = StudentNN(10).to(device)\n","metadata":{"id":"nKCpBR0LgLyf","execution":{"iopub.status.busy":"2024-05-03T09:55:10.543170Z","iopub.execute_input":"2024-05-03T09:55:10.544084Z","iopub.status.idle":"2024-05-03T09:55:10.833891Z","shell.execute_reply.started":"2024-05-03T09:55:10.544050Z","shell.execute_reply":"2024-05-03T09:55:10.833022Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"print(\"Norm of 1st layer of Student1:\", torch.norm(student1.features[0].weight).item())\nprint(\"Norm of 1st layer of Student2:\", torch.norm(student2.features[0].weight).item())\nprint(\"Norm of 1st layer of Student3:\", torch.norm(student3.features[0].weight).item())","metadata":{"id":"Xl9MWWSDzcg_","execution":{"iopub.status.busy":"2024-05-03T09:55:13.139628Z","iopub.execute_input":"2024-05-03T09:55:13.139971Z","iopub.status.idle":"2024-05-03T09:55:13.181822Z","shell.execute_reply.started":"2024-05-03T09:55:13.139944Z","shell.execute_reply":"2024-05-03T09:55:13.180813Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Norm of 1st layer of Student1: 4.591419696807861\nNorm of 1st layer of Student2: 4.591419696807861\nNorm of 1st layer of Student3: 4.591419696807861\n","output_type":"stream"}]},{"cell_type":"code","source":"total_params_teacher = \"{:,}\".format(sum(p.numel() for p in teacher.parameters()))\nprint(f\"Teacher parameters: {total_params_teacher}\")\ntotal_params_student = \"{:,}\".format(sum(p.numel() for p in student1.parameters()))\nprint(f\"Student1 parameters: {total_params_student}\")\ntotal_params_student = \"{:,}\".format(sum(p.numel() for p in student2.parameters()))\nprint(f\"Student2 parameters: {total_params_student}\")\ntotal_params_student = \"{:,}\".format(sum(p.numel() for p in student3.parameters()))\nprint(f\"Student3 parameters: {total_params_student}\")","metadata":{"id":"F1VyMTsrztwE","execution":{"iopub.status.busy":"2024-05-03T09:55:22.662333Z","iopub.execute_input":"2024-05-03T09:55:22.662737Z","iopub.status.idle":"2024-05-03T09:55:22.671004Z","shell.execute_reply.started":"2024-05-03T09:55:22.662708Z","shell.execute_reply":"2024-05-03T09:55:22.670284Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Teacher parameters: 139,611,210\nStudent1 parameters: 8,765,066\nStudent2 parameters: 8,765,066\nStudent3 parameters: 8,765,066\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### Train student without distillation","metadata":{"id":"hja8zcf1PxIN"}},{"cell_type":"code","source":"train(student1, train_loader, epochs=10, learning_rate=0.001, device=device)\ntest_accuracy_student = test(student1, test_loader, device)","metadata":{"id":"0NukWOgWzUp1","execution":{"iopub.status.busy":"2024-05-03T09:55:22.672845Z","iopub.execute_input":"2024-05-03T09:55:22.673179Z","iopub.status.idle":"2024-05-03T09:58:23.946218Z","shell.execute_reply.started":"2024-05-03T09:55:22.673154Z","shell.execute_reply":"2024-05-03T09:58:23.945216Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Epoch 1/10, Loss: 1.2820196561801158\nEpoch 2/10, Loss: 0.7824464176621888\nEpoch 3/10, Loss: 0.5606409196201187\nEpoch 4/10, Loss: 0.3801446989597872\nEpoch 5/10, Loss: 0.22264456907120508\nEpoch 6/10, Loss: 0.12985032568197422\nEpoch 7/10, Loss: 0.09279338865424208\nEpoch 8/10, Loss: 0.0811371057415786\nEpoch 9/10, Loss: 0.06597369281060593\nEpoch 10/10, Loss: 0.0631737320009819\nTest Accuracy: 76.82%\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Distillation Run","metadata":{"id":"B20nEgx8VMg0"}},{"cell_type":"code","source":"def train_student_kd(student_model, teacher_model, train_loader, epochs, learning_rate, temp, device):\n  optimizer = optim.Adam(student_model.parameters(), lr=learning_rate)\n  criterion = nn.KLDivLoss(reduction='batchmean')\n\n  teacher_model.eval()\n  student_model.train()\n\n  for epoch in range(epochs):\n    running_loss = 0.0\n    for images, labels in train_loader:\n      images, labels = images.to(device), labels.to(device)\n\n      optimizer.zero_grad()\n\n      with torch.no_grad():\n        teacher_outputs = teacher_model(images)\n\n      student_outputs = student_model(images)\n\n      loss = criterion(nn.functional.log_softmax(student_outputs/temp, dim=1),\n                       nn.functional.softmax(teacher_outputs/temp, dim=1))\n\n      loss.backward()\n      optimizer.step()\n      running_loss += loss.item()\n    print(f\"Epoch {epoch+1}/{epochs}, Loss: {running_loss / len(train_loader)}\")","metadata":{"id":"3Yj4pg4LVH9U","execution":{"iopub.status.busy":"2024-05-03T09:58:23.947622Z","iopub.execute_input":"2024-05-03T09:58:23.948354Z","iopub.status.idle":"2024-05-03T09:58:23.956255Z","shell.execute_reply.started":"2024-05-03T09:58:23.948317Z","shell.execute_reply":"2024-05-03T09:58:23.955345Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"train_student_kd(student2, teacher, train_loader, epochs=10, learning_rate=0.001, temp=2, device=device)\ntest_accuracy_student_kd = test(student2, test_loader, device)","metadata":{"id":"HeNXOfXZVIHC","execution":{"iopub.status.busy":"2024-05-03T09:58:23.958500Z","iopub.execute_input":"2024-05-03T09:58:23.958833Z","iopub.status.idle":"2024-05-03T10:02:44.463667Z","shell.execute_reply.started":"2024-05-03T09:58:23.958802Z","shell.execute_reply":"2024-05-03T10:02:44.462614Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Epoch 1/10, Loss: 0.5353349794817093\nEpoch 2/10, Loss: 0.2862569147058765\nEpoch 3/10, Loss: 0.20926374974458115\nEpoch 4/10, Loss: 0.15809949839968815\nEpoch 5/10, Loss: 0.11718916597649874\nEpoch 6/10, Loss: 0.08936374331526745\nEpoch 7/10, Loss: 0.06811348916700734\nEpoch 8/10, Loss: 0.05678903630665501\nEpoch 9/10, Loss: 0.04931816342465408\nEpoch 10/10, Loss: 0.043787854406839744\nTest Accuracy: 77.15%\n","output_type":"stream"}]},{"cell_type":"code","source":"def train_student_kd_ce(student_model, teacher_model, train_loader, epochs, learning_rate, temp, soft_target_loss_weight, ce_loss_weight, device):\n  ce_loss = nn.CrossEntropyLoss()\n  optimizer = optim.Adam(student_model.parameters(), lr=learning_rate)\n\n  teacher_model.eval()\n  student_model.train()\n\n  for epoch in range(epochs):\n    running_loss = 0.0\n    for images, labels in train_loader:\n      images, labels = images.to(device), labels.to(device)\n\n      optimizer.zero_grad()\n\n      with torch.no_grad():\n        teacher_outputs = teacher_model(images)\n\n      student_outputs = student_model(images)\n\n      soft_targets = nn.functional.softmax(teacher_outputs / temp, dim=-1)\n      soft_prob = nn.functional.log_softmax(student_outputs / temp, dim=-1)\n      soft_targets_loss = torch.sum(soft_targets * (soft_targets.log() - soft_prob)) / soft_prob.size()[0] * (temp**2)\n      # Calculate the true label loss\n      label_loss = ce_loss(student_outputs, labels)\n      # Weighted sum of the two losses\n      loss = soft_target_loss_weight * soft_targets_loss + ce_loss_weight * label_loss\n      loss.backward()\n      optimizer.step()\n\n      running_loss += loss.item()\n    print(f\"Epoch {epoch+1}/{epochs}, Loss: {running_loss / len(train_loader)}\")","metadata":{"id":"NfwCCk_5k3yF","execution":{"iopub.status.busy":"2024-05-03T10:02:44.464948Z","iopub.execute_input":"2024-05-03T10:02:44.465298Z","iopub.status.idle":"2024-05-03T10:02:44.475023Z","shell.execute_reply.started":"2024-05-03T10:02:44.465262Z","shell.execute_reply":"2024-05-03T10:02:44.474039Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"train_student_kd_ce(student3, teacher, train_loader=train_loader, epochs=10, learning_rate=0.001, temp=2, soft_target_loss_weight=0.025, ce_loss_weight=0.075, device=device)\ntest_accuracy_student_kd_ce = test(student3, test_loader, device)","metadata":{"id":"a1c-nC9im3vn","execution":{"iopub.status.busy":"2024-05-03T10:02:57.354837Z","iopub.execute_input":"2024-05-03T10:02:57.355692Z","iopub.status.idle":"2024-05-03T10:07:19.716360Z","shell.execute_reply.started":"2024-05-03T10:02:57.355660Z","shell.execute_reply":"2024-05-03T10:07:19.715406Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Epoch 1/10, Loss: nan\nEpoch 2/10, Loss: nan\nEpoch 3/10, Loss: nan\nEpoch 4/10, Loss: nan\nEpoch 5/10, Loss: nan\nEpoch 6/10, Loss: nan\nEpoch 7/10, Loss: nan\nEpoch 8/10, Loss: nan\nEpoch 9/10, Loss: nan\nEpoch 10/10, Loss: nan\nTest Accuracy: 79.78%\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Conclusion\n","metadata":{"id":"a1S6HOUnxqH7"}},{"cell_type":"code","source":"# Compare the student test accuracy with and without the teacher, after distillation\nprint(f\"Teacher accuracy: {test_acc_teacher:.2f}%\")\nprint(f\"Student accuracy without teacher: {test_accuracy_student:.2f}%\")\nprint(f\"Student accuracy with KD: {test_accuracy_student_kd:.2f}%\")\nprint(f\"Student accuracy with CE + KD: {test_accuracy_student_kd_ce:.2f}%\")","metadata":{"id":"JMEvwi6gwd84","execution":{"iopub.status.busy":"2024-05-03T10:07:19.717917Z","iopub.execute_input":"2024-05-03T10:07:19.718204Z","iopub.status.idle":"2024-05-03T10:07:19.723386Z","shell.execute_reply.started":"2024-05-03T10:07:19.718179Z","shell.execute_reply":"2024-05-03T10:07:19.722492Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Teacher accuracy: 81.01%\nStudent accuracy without teacher: 76.82%\nStudent accuracy with KD: 77.15%\nStudent accuracy with CE + KD: 79.78%\n","output_type":"stream"}]}]}